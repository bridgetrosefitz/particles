{"version":3,"sources":["components/Modal.js","fonts/Gambetta-Light.woff","fonts/Gambetta-Light.woff2","fonts/Gambetta-Bold.woff","fonts/Gambetta-Bold.woff2","globalStyles.js","textures/InteractiveTexture.js","components/Particles.js","shaders/fragment.glsl","shaders/vertex.glsl","components/Footer.js","resources/modalData.js","components/ClickableIcon.js","App.js","index.js"],"names":["Background","styled","div","ModalWrapper","ModalContent","CloseModalButton","MdClose","Modal","props","modalRef","useRef","animation","useSpring","config","duration","opacity","show","transform","keyPress","useCallback","e","key","onClose","useEffect","document","addEventListener","removeEventListener","ref","onClick","current","target","style","showModal","title","text","aria-label","GlobalStyle","createGlobalStyle","GambettaLight","GambettaLight2","GambettaBold","GambettaBold2","trail","maxAge","canvas","createElement","width","height","texture","THREE","context","getContext","easeOutSine","t","b","c","d","Math","sin","PI","clear","fillStyle","fillRect","draw","point","position","x","y","intensity","age","adjustedRadius","size","force","gradient","createRadialGradient","addColorStop","beginPath","arc","fill","InteractiveTexture","update","forEach","i","splice","needsUpdate","addTouch","newPoint","mostRecentPoint","length","xDistanceTravelled","yDistanceTravelled","combinedValues","min","push","gui","dat","Particles","mesh","myBufferGeometry","palaisRoyalTexture","useTexture","minFilter","magFilter","format","imageOriginalColors","imageWidth","image","imageHeight","imagePixelCount","colorThresholdForVisibility","imageToBeChanged","temporaryCanvasForPhotoEditing","scale","drawImage","imageData","getImageData","Float32Array","from","data","imageVisiblePixelCount","positions","uvs","index","Uint16Array","particleIndices","particleOffsets","particleDispersionAngles","pixelSkipper","floor","random","useFrame","state","delta","material","uniforms","uTime","value","gsap","fromTo","uParticleSize","to","uRandomDisplacementWeight","uParticleDepth","add","max","step","name","attach","count","array","itemSize","attachObject","normalized","fragmentShader","vertexShader","depthTest","transparent","uImageTexture","uImageTextureSize","uInteractiveTexture","onPointerMove","uv","args","color","wireframe","visible","Icon","a","modalData","button","component","link","map","icon","href","modal","ClickableIcon","Html","distanceFactor","class","fontSize","backgroundColor","padding","borderRadius","justify","Container","App","useState","setShowModal","modalTitle","setModalTitle","modalText","setModalText","sphere","sphereData","fallback","antialias","alpha","camera","fov","near","far","colorManagement","OrbitControls","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.f2e48896.chunk.js","sourcesContent":["import React, { useRef, useEffect, useCallback } from 'react'\nimport { useSpring, animated } from 'react-spring'\nimport styled from 'styled-components'\nimport { NoToneMapping } from 'three'\nimport { MdClose } from 'react-icons/md'\n\nconst Background = styled.div`\n  width: 100%;\n  height: 100%;\n  background: rgba(0, 0, 0, 0.8);\n  position: fixed;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`\n\nconst ModalWrapper = styled.div`\n  width: 800px;\n  height: 500px;\n  box-shadow: 0 5px 16px rgba(0, 0, 0, 0.2);\n  background: #fff;\n  color: #000;\n  display: grid;\n  ${'' /* grid-template-columns: 1fr 1fr; */}\n  position: relative;\n  z-index: 10;\n  border-radius: 10px;\n`\n\nconst ModalContent = styled.div`\n  display: flex;\n  flex-direction: column;\n  justify-content: normal;\n  align-items: left;\n  padding: 5em 5em;\n  line-height: 1.8;\n  color: #141414;\n\n  h1 {\n      font-weight: 600;\n  }\n  \n  p {\n    margin-bottom: 1rem;\n    font-weight: 100;\n  }\n\n  button {\n    padding: 10px 24px;\n    background: #141414;\n    color: #fff;\n    border: none;\n  }\n`\n\nconst CloseModalButton = styled(MdClose)`\n  cursor: pointer;\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  width: 32px;\n  height: 32px;\n  padding: 0;\n  z-index: 10;\n`\n\nconst Modal = (props) => {\n\n  const modalRef = useRef()\n\n  const animation = useSpring({\n    config: {\n      duration: 250\n    },\n    opacity: props.show ? 1 : 0,\n    transform: props.show ? `translateY(0%)` : `translateY(-100%)`\n  })\n\n  const closeModal = e => {\n    if(modalRef.current === e.target) {\n      props.onClose()\n    }\n  }\n\n  const keyPress = useCallback(e => {\n    if(e.key === 'Escape' && props.show) {\n      props.onClose()\n    }\n\n  }, [props.onClose, props.show])\n\n  useEffect(() => {\n    document.addEventListener('keydown', keyPress)\n    return () => document.removeEventListener('keydown', keyPress)\n  }, [keyPress])\n\n  return (\n    <>\n      {\n        props.show ? (\n          <Background ref={modalRef} onClick={closeModal}>\n          <animated.div style={animation}>\n              <ModalWrapper showModal={props.show}>\n              <ModalContent>\n                <h1>{props.title}</h1>\n                <p>{props.text}</p>\n              </ModalContent>\n                <CloseModalButton aria-label='Close modal' onClick={props.onClose}/>\n             </ModalWrapper>\n          </animated.div>\n          </Background> ) : null \n      }\n    </>\n  )\n}\n\nexport default Modal\n\n","export default __webpack_public_path__ + \"static/media/Gambetta-Light.42bd64d0.woff\";","export default __webpack_public_path__ + \"static/media/Gambetta-Light.34c53d67.woff2\";","export default __webpack_public_path__ + \"static/media/Gambetta-Bold.5341fb53.woff\";","export default __webpack_public_path__ + \"static/media/Gambetta-Bold.619ea7c4.woff2\";","import { createGlobalStyle } from \"styled-components\";\n\nimport GambettaLight from './fonts/Gambetta-Light.woff';\nimport GambettaLight2 from './fonts/Gambetta-Light.woff2';\n\nimport GambettaBold from './fonts/Gambetta-Bold.woff';\nimport GambettaBold2 from './fonts/Gambetta-Bold.woff2';\n\nexport const GlobalStyle = createGlobalStyle`\n\n  @font-face {\n      font-family: 'Gambetta';\n      src: local('Gambetta'), local('Gambetta'),\n      url(${GambettaLight}) format('woff'),\n      url(${GambettaLight2}) format('woff2');\n      font-weight: 300;\n  }\n  @font-face {\n      font-family: 'Gambetta';\n      src: local('Gambetta'), local('Gambetta'),\n      url(${GambettaBold}) format('woff'),\n      url(${GambettaBold2}) format('woff2');\n      font-weight: 700;\n  }\n\n  * {\n    box-sizing: border-box;\n    margin: 0;\n    padding: 0;\n    font-family: 'Gambetta', serif;\n  }\n\n`","import * as THREE from 'three'\n\nconst size = 64\nconst trail = []\nconst maxAge = 120\nconst radius = 0.15\n\nconst canvas = document.createElement('canvas')\ncanvas.width = canvas.height = size\nconst texture = new THREE.Texture(canvas)\n\nconst context = canvas.getContext('2d')\n\nconst easeOutSine = (t, b, c, d) => {\n  return c * Math.sin((t / d) * (Math.PI / 2)) + b;\n};\n\nconst clear = () => {\n  context.fillStyle = '#000'\n  context.fillRect(0, 0, canvas.width, canvas.height)\n}\n\nclear()\n\nconst draw = point => {\n  const position = {\n    x: point.x * size,\n    y: (1 - point.y) * size\n  }\n\n  let intensity = 1\n  if (point.age < maxAge * 0.3) {\n    intensity = easeOutSine(point.age / (maxAge * 0.3), 0, 1, 1)\n  } else {\n    intensity = easeOutSine(1 - (point.age - maxAge * 0.3) / (maxAge * 0.7), 0, 1, 1)\n  }\n\n  intensity *= point.force\n\n  const adjustedRadius = size * radius * intensity\n  const gradient = context.createRadialGradient(\n    position.x, position.y, adjustedRadius * 0.25,\n    position.x, position.y, adjustedRadius\n  )\n  gradient.addColorStop(0, 'rgba(255, 255, 255, 0.2)')\n  gradient.addColorStop(1, 'rgba(0, 0, 0, 0.0)')\n\n  context.beginPath()\n  context.fillStyle = gradient\n  context.arc(position.x, position.y, adjustedRadius, 0, Math.PI * 2)\n  context.fill()\n}\n\nconst addTouch = newPoint => {\n  let force = 0\n  const mostRecentPoint = trail[trail.length - 1]\n\n  if (mostRecentPoint) {\n    const xDistanceTravelled = mostRecentPoint.x - newPoint.x\n    const yDistanceTravelled = mostRecentPoint.y - newPoint.y\n    const combinedValues = xDistanceTravelled * xDistanceTravelled + yDistanceTravelled * yDistanceTravelled\n    // Multiplying by itself is processed faster than Math.pow and ** ... not entirely sure what value squaring these gives\n    force = Math.min(combinedValues * 10000, 1)\n  }\n\n  trail.push({ x: newPoint.x, y: newPoint.y, age: 0, force })\n}\n\nconst update = () => {\n  clear()\n\n  // age points\n  trail.forEach((point, i) => {\n    point.age++\n\n    // Remove ye olde points\n    if (point.age > maxAge) {\n      trail.splice(i, 1)\n    }\n  })\n\n  trail.forEach(draw)\n\n  texture.needsUpdate = true\n\n}\n\nconst InteractiveTexture = {\n  update,\n  addTouch,\n  texture\n}\nexport default InteractiveTexture","import React, { useEffect, useRef } from \"react\";\nimport { useTexture } from \"@react-three/drei\";\nimport { useFrame } from \"@react-three/fiber\";\nimport vertexShader from '../shaders/vertex.glsl'\nimport fragmentShader from '../shaders/fragment.glsl'\nimport InteractiveTexture from '../textures/InteractiveTexture'\nimport * as dat from 'dat.gui'\nimport gsap from \"gsap\";\nimport * as THREE from 'three'\n\nconst gui = new dat.GUI({ width: 500})\nconst debugObject = {\n  skipFactor: 1,\n}\n\n const Particles = props => {\n\n   const mesh = useRef()\n   const myBufferGeometry = useRef()\n\n   const palaisRoyalTexture = useTexture('images/palais-royal-3.png')\n   palaisRoyalTexture.minFilter = THREE.LinearFilter\n   palaisRoyalTexture.magFilter = THREE.LinearFilter\n   palaisRoyalTexture.format = THREE.RGBFormat\n\n   const imageWidth = palaisRoyalTexture.image.width\n   const imageHeight = palaisRoyalTexture.image.height\n\n   const imagePixelCount = imageWidth * imageHeight\n\n   let imageVisiblePixelCount = imagePixelCount\n   let colorThresholdForVisibility = 0\n   let imageOriginalColors\n   const applyColorThreshold = true\n\n   if (applyColorThreshold) {\n     imageVisiblePixelCount = 0\n     colorThresholdForVisibility = 200\n\n     const imageToBeChanged = palaisRoyalTexture.image\n     const temporaryCanvasForPhotoEditing = document.createElement('canvas')\n     const context = temporaryCanvasForPhotoEditing.getContext('2d')\n\n     temporaryCanvasForPhotoEditing.width = imageWidth\n     temporaryCanvasForPhotoEditing.height = imageHeight\n     context.scale(1, -1)\n     context.drawImage(imageToBeChanged, 0, 0, imageWidth, imageHeight * -1)\n\n     const imageData = context.getImageData(0, 0, temporaryCanvasForPhotoEditing.width, temporaryCanvasForPhotoEditing.height)\n     imageOriginalColors = Float32Array.from(imageData.data)\n\n     for(let i = 0; i < imagePixelCount; i++) {\n       if(imageOriginalColors[i * 4 + 0] > colorThresholdForVisibility) {imageVisiblePixelCount++}\n     }\n   }\n\n   const positions = new Float32Array([\n     -0.5,  0.5,  0.0,\n      0.5,  0.5,  0.0,\n     -0.5, -0.5,  0.0,\n      0.5, -0.5,  0.0\n   ])\n\n   const uvs = new Float32Array([\n     0.0,  0.0, \n     1.0,  0.0, \n     0.0,  1.0,\n     1.0,  1.0\n    ])\n\n   const index = new Uint16Array([0, 2, 1, 2, 3, 1])\n\n   const particleIndices = new Uint16Array(imagePixelCount)\n   const particleOffsets = new Float32Array(imagePixelCount * 3)\n   const particleDispersionAngles = new Float32Array(imagePixelCount)\n\n    for(let i = 0; i < imagePixelCount; i++) {\n      const skipFactor = 1\n      const pixelSkipper = Math.floor((Math.random() + 1) * skipFactor)\n      const weakestColor = 255\n      const strongestColor = 1\n\n      if (\n        applyColorThreshold && \n\n        (imageOriginalColors[i*pixelSkipper * 4 + 0] >= weakestColor &&\n         imageOriginalColors[i*pixelSkipper * 4 + 1] >= weakestColor &&\n         imageOriginalColors[i*pixelSkipper * 4 + 2] >= weakestColor) ||\n\n        (imageOriginalColors[i*pixelSkipper * 4 + 0] <= strongestColor &&\n         imageOriginalColors[i*pixelSkipper * 4 + 1] <= strongestColor &&\n         imageOriginalColors[i*pixelSkipper * 4 + 2] <= strongestColor)\n        ) continue;\n      \n\n      particleOffsets[i * 3 * pixelSkipper + 0] = (i * pixelSkipper) % imageWidth\n      particleOffsets[i * 3 * pixelSkipper + 1] = Math.floor((i * pixelSkipper) / imageWidth)\n\n      particleIndices[i* pixelSkipper] = i\n\n      particleDispersionAngles[i* pixelSkipper] = Math.random() * Math.PI;\n    }\n\n   useFrame((state, delta) => {\n     InteractiveTexture.update()\n     mesh.current.material.uniforms.uTime.value += delta\n   })\n\n   useEffect(() => {\n     gsap.fromTo(\n       mesh.current.material.uniforms.uParticleSize,\n       { value: 0},\n       { duration: 9, value: 1.3}\n     );\n     gsap.to(\n       mesh.current.material.uniforms.uRandomDisplacementWeight, \n      { duration: 9, value: 5 }\n     );\n     gsap.fromTo(\n       mesh.current.material.uniforms.uParticleDepth,\n       { value: 180},\n       { duration: 6, value: 8}\n     )\n\n     gui.add(mesh.current.material.uniforms.uParticleSize, 'value')\n     .min(0.001)\n     .max(4)\n     .step(0.001)\n     .name('uParticleSize')\n\n     gui.add(mesh.current.material.uniforms.uRandomDisplacementWeight, 'value')\n       .min(0.01)\n       .max(100)\n       .step(0.01)\n       .name('uRandomDisplacementWeight')\n\n     gui.add(mesh.current.material.uniforms.uParticleDepth, 'value')\n       .min(-500)\n       .max(500)\n       .step(1)\n       .name('uParticleDepth')\n\n    //  gui.add(debugObject, 'skipFactor')\n    //    .min(1)\n    //    .max(20)\n    //    .step(1)\n    //    .onFinishChange((skipFactor) => {\n    //      const particleIndices = new Uint16Array(imagePixelCount)\n    //      const particleOffsets = new Float32Array(imagePixelCount * 3)\n    //      const particleDispersionAngles = new Float32Array(imagePixelCount)\n    //      for (let i = 0; i < imagePixelCount; i++) {\n    //        const pixelSkipper = Math.floor((Math.random() + 1) * skipFactor)\n    //        const weakestColor = 255\n    //        const strongestColor = 1\n\n    //        if (\n    //          applyColorThreshold &&\n\n    //          (imageOriginalColors[i * pixelSkipper * 4 + 0] >= weakestColor &&\n    //            imageOriginalColors[i * pixelSkipper * 4 + 1] >= weakestColor &&\n    //            imageOriginalColors[i * pixelSkipper * 4 + 2] >= weakestColor) ||\n\n    //          (imageOriginalColors[i * pixelSkipper * 4 + 0] <= strongestColor &&\n    //            imageOriginalColors[i * pixelSkipper * 4 + 1] <= strongestColor &&\n    //            imageOriginalColors[i * pixelSkipper * 4 + 2] <= strongestColor)\n    //        ) continue;\n\n\n    //        particleOffsets[i * 3 * pixelSkipper + 0] = (i * pixelSkipper) % imageWidth\n    //        particleOffsets[i * 3 * pixelSkipper + 1] = Math.floor((i * pixelSkipper) / imageWidth)\n\n    //        particleIndices[i * pixelSkipper] = i\n\n    //        particleDispersionAngles[i * pixelSkipper] = Math.random() * Math.PI;\n    //      }\n\n    //      myBufferGeometry.current.attributes.aParticleIndex.array = particleIndices\n    //      myBufferGeometry.current.attributes.aParticleOffset.array = particleOffsets\n    //      myBufferGeometry.current.attributes.aParticleDispersionAngle.array = particleDispersionAngles\n    //      myBufferGeometry.current.attributes.aParticleIndex.needsUpdate = true\n    //      myBufferGeometry.current.attributes.aParticleOffset.needsUpdate = true\n    //      myBufferGeometry.current.attributes.aParticleDispersionAngle.needsUpdate = true\n    //    })\n\n\n      }, [])\n\n   return(\n     <group {...props}>\n      <mesh ref={mesh} >\n         <instancedBufferGeometry ref={myBufferGeometry}>\n          <bufferAttribute\n            attach=\"index\"\n            count={index.length}\n            array={index}\n            itemSize={1}\n          />\n         <bufferAttribute\n           attachObject={[\"attributes\", \"position\"]}\n           count={positions.length / 3}\n           array={positions}\n           itemSize={3}\n         />\n         <bufferAttribute\n           attachObject={[\"attributes\", \"uv\"]}\n           count={uvs.length / 2}\n           array={uvs}\n           itemSize={2}\n         />\n        <instancedBufferAttribute\n          attachObject={[\"attributes\", \"aParticleIndex\"]}\n          count={particleIndices.length}\n          array={particleIndices}\n          itemSize={1}\n          normalized={false}\n        />\n         <instancedBufferAttribute\n           attachObject={[\"attributes\", \"aParticleOffset\"]}\n           count={particleOffsets.length / 3}\n           array={particleOffsets}\n           itemSize={3}\n           normalized={false}\n         />\n         <instancedBufferAttribute\n           attachObject={[\"attributes\", \"aParticleDispersionAngle\"]}\n           count={particleDispersionAngles.length}\n           array={particleDispersionAngles}\n           itemSize={1}\n           normalized={false}\n         />\n       </instancedBufferGeometry>\n        <shaderMaterial\n          fragmentShader={fragmentShader} \n          vertexShader={vertexShader} \n          depthTest={false}\n          transparent\n          uniforms={{\n            uImageTexture: { value: palaisRoyalTexture },\n            uImageTextureSize: { value: new THREE.Vector2(imageWidth, imageHeight)},\n            uInteractiveTexture: { value: InteractiveTexture.texture},\n            uParticleSize: { value: 0.0 },\n            uTime: { value: 0 },\n            uParticleDepth: { value: 2.0 }, \n            uRandomDisplacementWeight: { value: 30.0 }\n          }}/>\n      </mesh>\n      <mesh \n        onPointerMove={({ uv }) => InteractiveTexture.addTouch(uv)}>\n        <planeGeometry args={[imageWidth, imageHeight, 1, 1]} />\n        <meshBasicMaterial\n          color='#fff'\n          wireframe\n          depthTest={false}\n          visible={false}\n        />\n      </mesh>\n     </group>\n    )\n }\n\nexport default Particles;","export default \"uniform sampler2D uImageTexture;\\n\\nvarying vec2 vUv;\\nvarying vec2 vParticleUv;\\n\\nvoid main () {\\n  vec4 color = texture2D(uImageTexture, vParticleUv);\\n\\n  // circle\\n\\n  float border = 0.3;\\n  float radius = 0.5;\\n  float dist = radius - distance(vUv, vec2(0.5));\\n  float t = smoothstep(0.0, border, dist);\\n\\n  // final color\\n  color.a = t;\\n\\n  gl_FragColor = color;\\n\\n}\";","export default \"\\n// Simplex 2D noise\\n//\\nvec3 permute(vec3 x) { return mod(((x*34.0)+1.0)*x, 289.0); }\\n\\nfloat snoise(vec2 v){\\n  const vec4 C = vec4(0.211324865405187, 0.366025403784439,\\n           -0.577350269189626, 0.024390243902439);\\n  vec2 i  = floor(v + dot(v, C.yy) );\\n  vec2 x0 = v -   i + dot(i, C.xx);\\n  vec2 i1;\\n  i1 = (x0.x > x0.y) ? vec2(1.0, 0.0) : vec2(0.0, 1.0);\\n  vec4 x12 = x0.xyxy + C.xxzz;\\n  x12.xy -= i1;\\n  i = mod(i, 289.0);\\n  vec3 p = permute( permute( i.y + vec3(0.0, i1.y, 1.0 ))\\n  + i.x + vec3(0.0, i1.x, 1.0 ));\\n  vec3 m = max(0.5 - vec3(dot(x0,x0), dot(x12.xy,x12.xy),\\n    dot(x12.zw,x12.zw)), 0.0);\\n  m = m*m ;\\n  m = m*m ;\\n  vec3 x = 2.0 * fract(p * C.www) - 1.0;\\n  vec3 h = abs(x) - 0.5;\\n  vec3 ox = floor(x + 0.5);\\n  vec3 a0 = x - ox;\\n  m *= 1.79284291400159 - 0.85373472095314 * ( a0*a0 + h*h );\\n  vec3 g;\\n  g.x  = a0.x  * x0.x  + h.x  * x0.y;\\n  g.yz = a0.yz * x12.xz + h.yz * x12.yw;\\n  return 130.0 * dot(m, g);\\n}\\n\\nfloat random(float number) {\\n  return fract(sin(number) * 43758.5453123);\\n}\\n\\n// ******************************** /\\\\ HELPERS /\\\\\\n\\nuniform vec2 uImageTextureSize;\\nuniform sampler2D uImageTexture;\\nuniform sampler2D uInteractiveTexture;\\nuniform float uParticleSize;\\nuniform float uTime;\\nuniform float uRandomDisplacementWeight;\\nuniform float uParticleDepth;\\n\\nattribute float aParticleIndex;\\nattribute vec3 aParticleOffset;\\nattribute float aParticleDispersionAngle;\\n\\nvarying vec2 vParticleUv;\\nvarying vec2 vUv;\\n\\nvoid main () {\\n\\n  // particle uv\\n  vec2 particleUv = aParticleOffset.xy / uImageTextureSize;\\n  vParticleUv = particleUv;\\n\\n  // displacement\\n  vec3 displaced = aParticleOffset;\\n\\n  // randomize\\n  displaced.xy += vec2(random(aParticleIndex) - 0.5, random(aParticleOffset.x + aParticleIndex) - 0.5) * uRandomDisplacementWeight;\\n  float randomZWeight = random(aParticleIndex) + snoise(vec2(aParticleIndex * 0.1, uTime * 0.1));\\n  displaced.z += randomZWeight * (random(aParticleIndex) * 2.0 * uParticleDepth);\\n\\n  // center\\n  displaced.xy -= uImageTextureSize * 0.5;\\n\\n  // interactive texture\\n  float blastFactor = texture2D(uInteractiveTexture, particleUv).r;\\n  displaced.z += blastFactor * 20.0 * randomZWeight;\\n  displaced.x += cos(aParticleDispersionAngle) * blastFactor * 20.0 * randomZWeight;\\n  displaced.y += sin(aParticleDispersionAngle) * blastFactor * 20.0 * randomZWeight;\\n\\n  // particle size\\n  float particleSize = (snoise(vec2(uTime, aParticleIndex) * 0.5) + 2.0);\\n  vec4 particleColor = texture2D(uImageTexture, particleUv);\\n  // float particleSizeWeightByBrightness = particleColor.r * 0.21 + particleColor.g * 0.71 + particleColor.b * 0.87;\\n  // particleSize *= max(particleSizeWeightByBrightness, 0.2);\\n  particleSize *= uParticleSize;\\n\\n  // final position\\n  vec4 mvPosition = modelViewMatrix * vec4(displaced, 1.0);\\n  mvPosition.xyz += position * particleSize;\\n  vec4 finalPosition = projectionMatrix * mvPosition;\\n\\n  gl_Position = finalPosition;\\n\\n  vUv = uv;\\n}\";","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\nimport { AiFillGithub, AiOutlineMail } from 'react-icons/ai'\nimport { TiSocialLinkedin } from 'react-icons/ti'\n\nconst FooterBackground = styled.div`\n  position: absolute;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  left: 0;\n  background: transparent;\n  height: 100%;\n  width: 5%;\n  color: #fff;\n`\n\n// const SpinAnimation = keyframes`\n//   0% {\n//     transform:rotate(0deg);\n//   }\n//   100% {\n//     transform:rotate(360deg);\n//   }\n// `;\n\n\nconst Icon = styled.a`\n  ${'' /* &:after {\n    content: \" 🦄\";\n    animation-name: ${SpinAnimation};\n    animation-duration: 5s;\n    animation-iteration-count: infinite;\n    animation-timing-function: linear;\n    display: inline-block;\n  } */}\n  text-decoration: none;\n  padding: 10px;\n  margin-left: 25px;\n  font-size: 30px;\n  color: #fff;\n  height: 50px;\n`\n\nconst WorkModeButton = styled.button`\n  height: 60px;\n  width: 60px;\n  padding: 5px;\n  margin-left: 25px;\n  margin-bottom: 25px;\n  font-size: 15px;\n  background-colorManagement: rgba(1, 1, 1);\n  color: black;\n  border: 5px;\n  border-color: white;\n  border-radius: 50%;\n  cursor: pointer;\n  position: absolute;\n  bottom: 0;\n`\n\nconst allIcons = [\n  {\n    component: <AiFillGithub />,\n    link: 'https://github.com/bridgetrosefitz'\n  }, \n  {\n    component: <TiSocialLinkedin />,\n    link: 'https://www.linkedin.com/in/bridgetrosefitzgerald/',\n  },\n  {\n    component: <AiOutlineMail />,\n    link: 'mailto:bridgetrosefitz@gmail.com',\n  }]\n\n  const styledIconsGroup = allIcons.map(icon => {\n    return(\n      <Icon href={icon.link} target=\"_blank\">\n        {icon.component}\n      </Icon>\n    )\n  })\n\nconst Footer = props => {\n\n  return(\n    <FooterBackground>\n      <WorkModeButton onClick={() => alert('I love Kevin')}>Work mode</WorkModeButton>\n      {styledIconsGroup}\n    </FooterBackground>\n  )\n}\n\nexport default Footer","const modalData = [\n  {\n    position: [0, 50, 200],\n    title: 'A little bit of history',\n    text: 'In 1789, King Louis XVI\\'s soldiers moved into Palais Royal and disrupted a group of civilians.'\n  },\n  {\n    position: [0, 0, 200],\n    title: 'Brands',\n    text: ['Shadow', 'LEK', 'World Economic Forum'],\n  },\n  {\n    position: [0, -50, 300],\n    title: 'Projects',\n    text: ['Digital Innovation', 'RACI', 'Personal website', 'Gratitude'],\n  }\n]\n\nmodalData.forEach(modal => modal.position[0] = (Math.random() -0.5) * 50)\n\nexport default modalData","import React from \"react\";\nimport { Html } from \"@react-three/drei\";\n\nconst ClickableIcon = (props) => {\n\n  return (\n    <>\n      <mesh {...props} >\n        <sphereGeometry args={[2.5, 32, 32]}/>\n        <meshStandardMaterial/>\n        <Html distanceFactor={200}>\n          <div \n            class=\"content\" \n            style={{ \n              color: \"black\",\n              fontSize: 10, \n              backgroundColor: 'white', \n              height: 40,\n              width: 40, \n              padding: 10, \n              borderRadius: '50%',\n              justify: 'center' }}>\n            G'day\n          </div>\n        </Html>\n      </mesh>\n    </>\n  )\n}\n\nexport default ClickableIcon;","import React, { useState, Suspense } from \"react\";\nimport styled from 'styled-components';\nimport Modal from \"./components/Modal\";\nimport { GlobalStyle } from './globalStyles';\nimport { Canvas } from \"@react-three/fiber\";\nimport { OrbitControls } from \"@react-three/drei\";\nimport Particles from './components/Particles'\nimport Footer from './components/Footer'\nimport modalData from './resources/modalData'\nimport ClickableIcon from './components/ClickableIcon'\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`\n\nconst App = () => {\n  const [showModal, setShowModal] = useState(false)\n  const [modalTitle, setModalTitle] = useState('')\n  const [modalText, setModalText] = useState('')\n\n  const handleOpenModal = (sphereData) => {\n    setShowModal(true)\n    setModalTitle(sphereData.title)\n    setModalText(sphereData.text)\n  }\n\n  const handleCloseModal = () => {\n    setShowModal(false)\n    setModalTitle('')\n    setModalText('')\n  }\n\n  const spheres = modalData.map((sphere, index) => {\n    return <ClickableIcon key={index} onClick={() => handleOpenModal(sphere)} position={sphere.position}/>\n  })\n\n  return (\n    <>\n    <Container>\n      <GlobalStyle/>\n      <Suspense fallback={<h1>Loading...</h1>}>     \n        <Canvas\n          antialias\n          alpha\n          camera={{ fov: 50, near: 1, far: 10000, position: [0, 0, 310]}}\n          colorManagement={false}\n          >\n          <color attach='background' args={['black']}/>\n          <OrbitControls/>\n          <ambientLight intensity={0.1} />\n          {/* {spheres} */}\n          <Particles /> \n        </Canvas>\n      </Suspense>\n      <Modal show={showModal} onClose={handleCloseModal} title={modalTitle} text={modalText}/>\n      {/* <Footer /> */}\n    </Container>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}